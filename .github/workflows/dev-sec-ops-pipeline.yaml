# .github/workflows/devsecops-pipeline.yml
name: DevSecOps Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  devsecops-pipeline:
    name: DevSecOps Full Pipeline
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20

    # ðŸ”¹ 1. SAST - Static Application Security Testing
    - name: Run ESLint (Static Code Analysis)
      run: |
        npm install
        npm run lint

    # ðŸ”¹ 2. Dependency Scanning
    - name: Audit Dependencies
      run: |
        npm audit --audit-level=high

    # ðŸ”¹ 3. Build the application
    - name: Build Frontend
      run: |
        cd frontend
        npm install
        npm run build

    - name: Build Backend
      run: |
        cd backend
        npm install
        npm run build

    # ðŸ”¹ 4. Container Build & Scan
    - name: Build Docker images
      run: |
        docker build -t voting-app-frontend ./frontend
        docker build -t voting-app-backend ./backend

    - name: Scan Docker images for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: voting-app-frontend
        format: table

    - name: Scan Docker images for vulnerabilities (backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: voting-app-backend
        format: table

    # ðŸ”¹ 5. DAST - Dynamic Application Security Testing (opcional)
    # AquÃ­ podrÃ­as lanzar zaproxy, OWASP Zap, etc., despuÃ©s de levantar servicios

    # ðŸ”¹ 6. Deployment (SÃ³lo si todo pasÃ³)
    - name: Deploy to Production Server
      if: success()
      run: |
        echo "Todo validado, listo para desplegar."
        # comandos de despliegue tipo docker-compose up -d
